{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js","images/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","console","log","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","accumulator","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.44ab2f13.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n    Array.from(Array(STAGE_HEIGHT), () =>\r\n        new Array(STAGE_WIDTH).fill([0, 'clear']),\r\n    )\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n    for (let y = 0; y < player.tetromino.length; y += 1) {\r\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n            // 1. Check that we're on an actual Tetromino cell\r\n            if (player.tetromino[y][x] !== 0) {\r\n                if (\r\n                //2. Check that our move is inside the game area's height (y)\r\n                //we shouldn't go thru bottom of play area\r\n                !stage[y + player.pos.y + moveY] ||\r\n                //3.  Check that our move is inside the game areas width (x)\r\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                //4. Check taht the cell we're moving to isn't set to clear\r\n                stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n                'clear'\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../images/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div `\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 960px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n`;\r\n\r\n","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0,0,0' },\r\n\r\n    I: {\r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0]\r\n        ],\r\n        color: '80, 227, 230',\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0]\r\n        ],\r\n        color: '36, 95, 223',\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L']\r\n        ],\r\n        color: '223, 172, 36',\r\n    },\r\n    O: {\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O']\r\n        ],\r\n        color: '223, 217, 36',\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0]\r\n        ],\r\n        color: '48, 211, 56',\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0]\r\n        ],\r\n        color: '132, 61, 198',\r\n    },\r\n    Z: {\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z', 'Z'],\r\n            [0, 0, 0]\r\n        ],\r\n        color: '227, 78, 78',\r\n    }\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    console.log(randTetromino);\r\n    return TETROMINOS[randTetromino];\r\n}","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        const sweepRows = newStage =>\r\n            newStage.reduce((accumulator, row) => {\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n                    accumulator.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n                    return accumulator;\r\n                }\r\n                accumulator.push(row);\r\n                return accumulator;\r\n            }, [])\r\n    \r\n        const updateStage = prevStage => {\r\n            //first flush the stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n            );\r\n            //then draw the tetromino\r\n            player.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newStage[y + player.pos.y][x + player.pos.x] = [\r\n                            value,\r\n                            `${player.collided ? 'merged' : 'clear'}`,\r\n                        ];\r\n                    }\r\n                });\r\n            });\r\n            //Collision check\r\n            if (player.collided) {\r\n                resetPlayer();\r\n                return sweepRows(newStage);\r\n            }\r\n\r\n            return newStage;\r\n        };\r\n\r\n        setStage(prev => updateStage(prev));\r\n    }, [player, resetPlayer]);\r\n\r\n    return [stage, setStage, rowsCleared];\r\n};","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height}, \r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.8);\r\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n    `","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={type} color={TETROMINOS[type].color} />\r\n)\r\n\r\nexport default React.memo(Cell); //only rerender the dells changing with the tetromino","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n        \r\n    </StyledStage>\r\n)\r\n\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n`;","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\n\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n`;","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n)\r\n\r\nexport default StartButton;","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n//styled components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n//custom hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n//Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n    console.log('re-render');\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n            updatePlayerPos({ x: dir / 2, y: 0 });\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        //reset everything\r\n        setStage(createStage());\r\n        setDropTime(1000);\r\n        resetPlayer();\r\n        setScore(0);\r\n        setLevel(0);\r\n        setRows(0);\r\n        setGameOver(false);\r\n    };\r\n\r\n    const drop = () => {\r\n        //Increase level wehn player has cleared 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            //Also increase speed\r\n            setDropTime(1000 / (level + 1) + 200);\r\n        }\r\n\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1 / 2, collided: false })\r\n        } else {\r\n            // Game Over\r\n            if (player.pos.y < 1) {\r\n                console.log('GAME OVER!');\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({ x: 0, y: 0, collided: true });\r\n        }\r\n    }\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 40){\r\n                setDropTime(1000 / (level + 1) + 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        setDropTime(null);\r\n        drop();\r\n    }\r\n\r\n    const move = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37) {\r\n                movePlayer(-1);\r\n            } else if (keyCode === 39) {\r\n                movePlayer(1);\r\n            } else if (keyCode === 40) {\r\n                dropPlayer();\r\n            } else if (keyCode === 38) {\r\n                playerRotate(stage, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n\r\n    }, dropTime)\r\n\r\n    return (\r\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <Display gameOver={gameOver} text=\"Game Over\" />\r\n                    ) : (\r\n                            <div>\r\n                                <Display text={`Score: ${score}`} />\r\n                                <Display text={`Rows: ${rows}`} />\r\n                                <Display text={`Level: ${level}`} />\r\n                            </div>\r\n                        )}\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    );\r\n};\r\n\r\nexport default Tetris;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n        //matrix = tetromino\r\n    const rotate = (matrix, dir) => {\r\n        //Make the rows become columns (transpose)\r\n        const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\r\n        //Reverse each row to get a rotated matrix\r\n        if ( dir > 0) {\r\n            return rotatedTetro.map(row => row.reverse());\r\n        }\r\n        return rotatedTetro.reverse();\r\n    }\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n        while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1)); //goes back and forth to check collision - if collision it won't mutate upon rotation - may appear to repostion\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer);\r\n    }\r\n\r\n    const updatePlayerPos = ({ x, y, collided }) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        }));\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: randomTetromino().shape,\r\n            collided: false,\r\n        });\r\n    }, []);\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 40, 80, 80, 80, 300, 300, 1200, 1200, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        //we have score\r\n        if (rowsCleared > 0) {\r\n            //this is how original tetris score is calculated\r\n            setScore(prev => prev + linePoints[rowsCleared -1] * (level + 1 ));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n\r\n    }, [calcScore, rowsCleared, score]);\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}